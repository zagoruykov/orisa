name: CI

on:
  push:
    branches:
      - main

  workflow_dispatch:
    inputs:
      version:
        description: Image version
        required: true

env:
  REGISTRY: registry.digitalocean.com/orisa
  IMAGE_NAME: orisa_api

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2
      - name: Build container images
        run: |
          docker-compose -f docker-compose.yml build
          docker tag orisa_nginx $(echo $REGISTRY)/orisa_nginx:$(echo $GITHUB_SHA | head -c7)    
          docker tag orisa_web $(echo $REGISTRY)/orisa_web:$(echo $GITHUB_SHA | head -c7)
      - name: Build tests
        run: docker exec $(echo $REGISTRY)/orisa_web:$(echo $GITHUB_SHA | head -c7) poetry run pytest .
      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
      - name: Log in to DigitalOcean Container Registry with short-lived credentials
        run: doctl registry login --expiry-seconds 600
      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push $(echo $REGISTRY)/orisa_web:$(echo $GITHUB_SHA | head -c7)
          docker push $(echo $REGISTRY)/orisa_nginx:$(echo $GITHUB_SHA | head -c7)

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout the repo
        uses: actions/checkout@v2

      - name: Deploy to Digital Ocean droplet via SSH action
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSHKEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          envs: |
            REGISTRY,{{ secrets.DIGITALOCEAN_ACCESS_TOKEN }},GITHUB_SHA,
            {{ secrets.DEBUG }},
            {{ secrets.SECRET_KEY }},
            {{ secrets.DB_NAME }},
            {{ secrets.DB_USER }},
            {{ secrets.DB_PASSWORD }},
            {{ secrets.DB_HOST }},
            {{ secrets.DB_PORT }},
          script: |
            # Login to registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} registry.digitalocean.com
            # Stop running container
            docker rm -f $(docker ps -a -q)
            docker rmi -f $(docker images -a -q)
            # Update repo
            cd orisa
            git switch main
            git pull origin main
            # Set envs
            rm .env
            echo DEBUG=${{ secrets.DEBUG }} >> .env
            echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo DB_USER=${{ secrets.DB_USER }} >> .env
            echo DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            # Run a new container from a new image
            docker-compose -f docker-compose.yml up -d